'use client'; 

import React, { useState, useEffect, useCallback } from 'react';
import { Send, ChevronLeft, LogOut, Clock, Target, Calendar } from 'lucide-react';

// --- 1. –¢–ò–ü–´ –î–ê–ù–ù–´–• –î–õ–Ø TYPESCRIPT ---
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–∑ PostgreSQL —á–µ—Ä–µ–∑ API
interface UserProfile {
    telegram_id: number;
    name: string;
    goal: 'gain' | 'loss' | 'maintain';
    meal_frequency: string;
    target_calories: number;
    target_protein: number;
    target_fat: number;
    target_carbs: number;
    weight: number;
    age: number;
    gender: 'male' | 'female';
    is_subscribed: number;
}

interface ProfileCardProps {
    icon: React.ReactElement<React.SVGProps<SVGSVGElement>>;
    title: string;
    value: string;
    color: string;
}

interface Message {
    id: number;
    text: string;
    sender: 'user' | 'trainer';
}

// --- 2. –ö–û–ú–ü–û–ù–ï–ù–¢ ProfileCard ---
const ProfileCard: React.FC<ProfileCardProps> = ({ icon, title, value, color }) => (
  <div className="flex items-center p-3 bg-gray-50 rounded-lg shadow-sm">
    {/* –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º React.cloneElement –∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º props */}
    {React.cloneElement(icon, { className: `w-6 h-6 mr-3 text-${color}-500` })} 
    <div>
      <p className="text-xs text-gray-500">{title}</p>
      <p className="font-semibold text-gray-800">{value}</p>
    </div>
  </div>
);

// --- 3. –ö–û–ú–ü–û–ù–ï–ù–¢ ProfileView ---
interface ProfileViewProps {
    user: UserProfile | null;
    setView: (view: 'chat' | 'profile') => void;
}

const ProfileView: React.FC<ProfileViewProps> = ({ user, setView }) => {
    if (!user) {
        return <div className="p-4 text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>;
    }

    const goalMap = {
        'gain': '–ù–∞–±–æ—Ä –ú—ã—à—Ü üí™',
        'loss': '–°–Ω–∏–∂–µ–Ω–∏–µ –í–µ—Å–∞ üî•',
        'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ üëå'
    };
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionStatus = user.is_subscribed === 1 ? 'PRO –ê–∫—Ç–∏–≤–µ–Ω' : 'Free –ü–ª–∞–Ω';

    return (
        <div className="p-4 bg-white min-h-screen">
            <h2 className="text-2xl font-bold mb-6 text-gray-800 border-b pb-2">üë§ –¢–≤–æ–π –ü—Ä–æ—Ñ–∏–ª—å</h2>
            
            <div className="grid grid-cols-2 gap-4 mb-8">
                <ProfileCard 
                    icon={<Target />} 
                    title="–ì–ª–∞–≤–Ω–∞—è –¶–µ–ª—å" 
                    value={goalMap[user.goal] || user.goal} 
                    color="indigo" 
                />
                <ProfileCard 
                    icon={<Clock />} 
                    title="–ß–∞—Å—Ç–æ—Ç–∞ –ü–∏—Ç–∞–Ω–∏—è" 
                    value={user.meal_frequency} 
                    color="green" 
                />
                <ProfileCard 
                    icon={<Calendar />} 
                    title="–ü–æ–¥–ø–∏—Å–∫–∞" 
                    value={subscriptionStatus} 
                    color={user.is_subscribed === 1 ? "yellow" : "gray"}
                />
                <ProfileCard 
                    icon={<LogOut />} 
                    title="–í—ã—Ö–æ–¥" 
                    value="–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫" 
                    color="red" 
                />
            </div>
            
            <h3 className="text-xl font-semibold mb-4 text-gray-700">–¢–≤–æ–∏ –ù–æ—Ä–º—ã –ö–ë–ñ–£</h3>
            <div className="space-y-2">
                <p className="text-lg">üî• **–ö–∞–ª–æ—Ä–∏–∏:** {user.target_calories} –∫–∫–∞–ª</p>
                <p className="text-lg">ü•© **–ë–µ–ª–∫–∏:** {user.target_protein} –≥</p>
                <p className="text-lg">ü•ë **–ñ–∏—Ä—ã:** {user.target_fat} –≥</p>
                <p className="text-lg">üçö **–£–≥–ª–µ–≤–æ–¥—ã:** {user.target_carbs} –≥</p>
            </div>

            <div className="mt-8">
                <button 
                    onClick={() => setView('chat')} 
                    className="w-full bg-indigo-600 text-white p-3 rounded-lg hover:bg-indigo-700 transition"
                >
                    –ü–µ—Ä–µ–π—Ç–∏ –≤ –ß–∞—Ç —Å –¢—Ä–µ–Ω–µ—Ä–æ–º
                </button>
            </div>
        </div>
    );
};

// --- 4. –ö–û–ú–ü–û–ù–ï–ù–¢ ChatView ---
interface ChatViewProps {
    user: UserProfile | null;
    setView: (view: 'chat' | 'profile') => void;
}

const ChatView: React.FC<ChatViewProps> = ({ user, setView }) => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
    const userContext = user 
        ? `–¶–µ–ª—å: ${user.goal}, –í–µ—Å: ${user.weight} –∫–≥, –ù–æ—Ä–º–∞: –ö–∫–∞–ª=${user.target_calories}, –ë–µ–ª–∫–∏=${user.target_protein}, –ñ–∏—Ä—ã=${user.target_fat}, –£–≥–ª–µ–≤–æ–¥—ã=${user.target_carbs}.` 
        : "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.";

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å sendMessage –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç systemTrigger
    const sendMessage = useCallback(async (systemTrigger?: string) => {
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ò–õ–ò —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        const messageToSend = systemTrigger || input;
        
        // –ë–õ–û–ö–ò–†–£–ï–ú: –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ
        if (!messageToSend.trim() || !user) return; 

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!systemTrigger) {
            const newMessage: Message = { id: Date.now(), text: messageToSend, sender: 'user' };
            setMessages(prev => [...prev, newMessage]);
        }
        
        setInput('');
        setIsLoading(true);

        try {
            const history = messages.map(m => ({ 
                role: m.sender === 'user' ? 'user' : 'system', 
                text: m.text 
            })).slice(-10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞

            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    message: systemTrigger || messageToSend, 
                    context: userContext,
                    chatHistory: history 
                }),
            });

            if (response.ok) {
                const data = await response.json();
                const trainerMessage: Message = { id: Date.now() + 1, text: data.text, sender: 'trainer' };
                setMessages(prev => [...prev, trainerMessage]);
            } else {
                const errorData = await response.json();
                const errorMessage: Message = { id: Date.now() + 1, text: `‚ùå –û—à–∏–±–∫–∞ LLM: ${errorData.error}`, sender: 'trainer' };
                setMessages(prev => [...prev, errorMessage]);
            }
        } catch (error: unknown) { // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏
            console.error('Chat failed:', error);
            const errorMessage: Message = { id: Date.now() + 1, text: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.', sender: 'trainer' };
            setMessages(prev => [...prev, errorMessage]);
        } finally {
            setIsLoading(false);
        }
    }, [input, user, userContext, messages]); 

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
    useEffect(() => {
        const chatWindow = document.getElementById('chat-window');
        if (chatWindow) {
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }
    }, [messages]);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ LLM)
    useEffect(() => {
        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        if (messages.length === 0 && user) { 
             const welcomeMessage: Message = { id: Date.now(), text: "–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç. –¢—Ä–µ–Ω–µ—Ä –∑–∞–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", sender: 'trainer' };
             
             // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–æ–ª–æ–≤–æ–∫
             setMessages([welcomeMessage]); 
             
             // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3 –≤–æ–ø—Ä–æ—Å–æ–≤
             sendMessage('–ó–∞–¥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞: –ø—Ä–æ –µ–¥—É, –∞–ª–ª–µ—Ä–≥–∏—é –∏ –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ–≥–æ —Ü–µ–ª–∏.'); 
        }
    }, [user, messages.length, sendMessage]); 

    return (
        <div className="flex flex-col h-screen bg-gray-50">
            {/* Header */}
            <header className="flex items-center p-4 border-b bg-white shadow-sm">
                <button onClick={() => setView('profile')} className="mr-4 text-gray-600 hover:text-gray-800">
                    <ChevronLeft className="w-6 h-6"/>
                </button>
                <h1 className="text-lg font-semibold text-gray-800">üí¨ –ß–∞—Ç —Å –¢—Ä–µ–Ω–µ—Ä–æ–º</h1>
            </header>

            {/* Chat Window */}
            <main id="chat-window" className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map(msg => (
                    <div 
                        key={msg.id} 
                        className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                        <div className={`max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-md ${
                            msg.sender === 'user' 
                            ? 'bg-indigo-500 text-white rounded-br-none' 
                            : 'bg-white text-gray-800 rounded-tl-none border border-gray-200'
                        }`}>
                            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */}
                            {msg.text}
                        </div>
                    </div>
                ))}
                {isLoading && (
                    <div className="flex justify-start">
                        <div className="bg-white p-3 rounded-xl rounded-tl-none border border-gray-200 text-gray-500">
                            –ü–µ—á–∞—Ç–∞–µ—Ç...
                        </div>
                    </div>
                )}
            </main>

            {/* Input Footer */}
            <footer className="p-4 border-t bg-white">
                <div className="flex space-x-2">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
                        placeholder="–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É..."
                        className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                        disabled={isLoading}
                    />
                    <button
                        onClick={() => sendMessage()}
                        className={`bg-indigo-600 text-white p-3 rounded-lg transition ${isLoading ? 'opacity-50' : 'hover:bg-indigo-700'}`}
                        disabled={isLoading}
                    >
                        <Send className="w-6 h-6" />
                    </button>
                </div>
            </footer>
        </div>
    );
};

// --- 5. –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ APP ---
const App = () => {
    const [user, setUser] = useState<UserProfile | null>(null);
    const [view, setView] = useState<'chat' | 'profile'>('chat');
    const [isLoadingProfile, setIsLoadingProfile] = useState(true);
    const [loadError, setLoadError] = useState<string | null>(null);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î
    useEffect(() => {
        const checkTelegramInit = () => {
             // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∏–ø–∏–∑–∏—Ä—É–µ–º window.Telegram –∫–∞–∫ unknown –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º guard
            const telegramWebApp = (window as unknown as { Telegram: { WebApp: any } })?.Telegram?.WebApp;
            
            // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É ID
            const telegramId = process.env.NODE_ENV === 'development' 
                ? 1056878733 // –ó–∞–≥–ª—É—à–∫–∞ ID
                : telegramWebApp?.initDataUnsafe?.user?.id;
            
            if (telegramId) {
                // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API-–º–∞—Ä—à—Ä—É—Ç
                const fetchProfile = async (id: number) => {
                    setIsLoadingProfile(true);
                    setLoadError(null);
                    try {
                        const response = await fetch(`/api/profile?id=${id}`);
                        if (!response.ok) {
                            throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π –µ–≥–æ –≤ Telegram /start');
                        }
                        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø
                        const userData: UserProfile = await response.json() as UserProfile; 
                        setUser(userData);
                    } catch (error) { // error —Ç–µ–ø–µ—Ä—å –Ω–µ—è–≤–Ω–æ 'unknown'
                        const errorMessage = error instanceof Error 
                            ? error.message 
                            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.'; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Error, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                        setLoadError(errorMessage);
                    } finally {
                        setIsLoadingProfile(false);
                    }
                };
                fetchProfile(telegramId);
            } else {
                setIsLoadingProfile(false);
                setLoadError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram Web App.");
            }
        };

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ Telegram Web App
        setTimeout(checkTelegramInit, 100); 
    }, []); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)

    if (isLoadingProfile) {
        return <div className="flex items-center justify-center h-screen text-xl text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
    }

    if (loadError) {
        return <div className="flex flex-col items-center justify-center h-screen text-red-600 p-4 text-center border-4 border-red-200 m-8">
            <h1 className="font-bold mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!</h1>
            <p>{loadError}</p>
            <p className="mt-4">–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–æ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram, –∏ —á—Ç–æ –≤–∞—à API-–∫–ª—é—á –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.</p>
        </div>;
    }

    if (!user) {
        // –ï—Å–ª–∏ loadError –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ user –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.
        return <div className="flex items-center justify-center h-screen text-red-600 p-4 text-center">
            <h1 className="font-bold">–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</h1>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start.</p>
        </div>;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –Ω—É–∂–Ω—ã–π –≤–∏–¥
    if (view === 'profile') {
        return <ProfileView user={user} setView={setView} />;
    }
    
    return <ChatView user={user} setView={setView} />;
};

export default App;
